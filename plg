#!/usr/bin/env bash
set -e


die() {
    printf "$1\n" >&2
    show_cursor
    exit 1
}

hdr() {
    if $SINGLE_LINE; then
        # Clear line and overwrite
        printf "\r%*s" "$(tput cols)" "" >&2
        printf "\r$*" >&2
    else
        printf "$*\n" >&2
    fi
}

gitcmd() {
    local repopath="$1"
    local subcmd="$2"
    local output=
    local r=

    set +e
    if [ "$subcmd" == clone ]; then
        output=$(GIT_TERMINAL_PROMPT=0 git $subcmd ${@:3} "$repopath" 2>&1)
        r=$?
    else
        output=$(git -C "$repopath" $subcmd ${@:3} 2>&1)
        r=$?
    fi
    set -e

    # shellcheck disable=SC2181
    if [ $r != 0 ]; then
        hdr "${repopath##"$PLG_PREFIX/"}: \033[91m${subcmd^} failed\033[0m"
        printf "$output\n"
        exit $r
    else
        printf "$output"
    fi
}

hide_cursor() { printf '\033[?25l'; }

show_cursor() { printf '\x1b[?25h'; }

usage() {
    local esc=$(printf '\033')
    cat << EOF >&2
Usage: plg [OPTIONS] <COMMAND>

${esc}[93mCOMMANDS:${esc}[0m
  ${esc}[92msy(nc)${esc}[0m        Sync and patch all plugins
  ${esc}[92mst(atus)${esc}[0m      Show status
  ${esc}[92mc(lean)${esc}[0m       Delete stray pacakges
  ${esc}[92mp(atch)${esc}[0m       Apply patches onto all plugins
  ${esc}[92mu(npatch)${esc}[0m     Unpatch all plugins

${esc}[93mOPTIONS:${esc}[0m
    ${esc}[92m-j${esc}[0m          Job count for syncing [default: $PLG_JOBS]
    ${esc}[92m-s${esc}[0m          Print output on single line

${esc}[93mENVIRONMENT:${esc}[0m
  ${esc}[92mPLG_PLUGINS${esc}[0m          Path to configuration file, should export PKGS=() and optionally PATCHES=()
  ${esc}[92mPLG_PREFIX${esc}[0m           Path to clone repositories into, needs to be on runtimepath
  ${esc}[92mPLG_PATCHDIR${esc}[0m         Path to patches

EOF
    exit 1
}

job_unpatch() {
    local name="$1"
    local repo="$PLG_PREFIX/$(basename $name)"
    if [ ! -d "$repo" ]; then
        return
    fi

    local output=$(gitcmd $repo checkout .)
    if [ "$output" != "Updated 0 paths from the index" ]; then
        hdr "$name: \033[92m$output\033[0m"
    fi

    # Skip parser*/ directories for nvim-treesitter
    gitcmd $repo clean \
        --exclude=parser \
        --exclude=parser-info \
        --exclude=.tags \
        --exclude=.luarc.json \
        -fdx
}

job_sync_repo() {
    local remotepath="$1"

    if [[ "$remotepath" == *://* ]]; then
        local url="$remotepath"
    else
        local url="https://github.com/$remotepath"
    fi

    mkdir -p "$PLG_PREFIX"
    local outdir="$PLG_PREFIX/$(basename $remotepath)"

    if [ -d "$outdir" ]; then
        local output=$(gitcmd $outdir pull)
        hdr "$remotepath: \033[92m$(sed -n '1p' <<< "$output")\033[0m"
    else
        gitcmd $outdir clone -c advice.detachedHead=false --depth $PLG_CLONE_DEPTH "$url"
        local git_ref=$(gitcmd $outdir rev-parse --short HEAD)
        hdr "$remotepath: \033[92mCloned $git_ref\033[0m"
    fi
}

plg_sync() {
    local i=0
    for pkg in ${PKGS[@]}; do
        job_sync_repo $pkg &

        # Clone PLG_JOBS repos at a time
        if [ $((i % PLG_JOBS)) = $((PLG_JOBS - 1)) ]; then
            wait
        fi
        i=$((i + 1))
    done

    wait

    plg_patch
}

plg_unpatch() {
    for pkg in ${PKGS[@]}; do
        job_unpatch $pkg
    done
}

plg_patch() {
    [ -z "${PATCHES[*]}" ] && return

    for p in ${PATCHES[@]}; do
        gitcmd $PLG_PREFIX/$p apply "$PLG_PATCHDIR/$(basename "$p").patch"
        local remotepath="$(tr ' ' '\n' <<< "${PKGS[*]}" | grep "$p$")"
        hdr "$remotepath: \033[92mPatched successfully\033[0m"
    done
}

plg_status() {
    for pkg in ${PKGS[@]}; do
        local repo="$PLG_PREFIX/$(basename "$pkg")"
        if [ -z "$repo" ]; then
            echo "Not found: $pkg" >&2
            continue
        fi

        # * Try tag name
        local refname=$(git -C $repo tag --points-at HEAD 2> /dev/null | head -n1)
        # * Try branch name
        [ -z "$refname" ] &&
            local refname=$(git -C $repo symbolic-ref --short HEAD 2> /dev/null)
        [ -n "$refname" ] && refname="[$refname]"
        printf "$pkg \033[92m$refname\033[0m\n" >&2

        git -c color.status=always -C "$repo" status -s
    done
}

plg_clean() {
    local cleaned=false
    for d in "$PLG_PREFIX"/*; do
        local name=$(basename $d)
        if ! grep -qE "/${name}\s+" <<< "${PKGS[*]} "; then
            echo "Removing stray package: $name"
            rm -rf ${d}
            cleaned=true
        fi
    done
    $cleaned || echo "No stray packages"
}

################################################################################

# Exports PKGS and PATCHES
PLG_PLUGINS=${PLG_PLUGINS:-$HOME/.config/nvim/plugins.sh}
PLG_PATCHDIR="${PLG_PATCHDIR:-$HOME/.config/nvim/patches}"
# Skip support for .../opt/
PLG_PREFIX=${PLG_PREFIX:-"$HOME/.local/share/nvim/site/pack/plg/start"}
PLG_CLONE_DEPTH=${PLG_CLONE_DEPTH:-1}
PLG_JOBS=8
SINGLE_LINE=false

# shellcheck disable=SC1090
source "$PLG_PLUGINS"

trap show_cursor INT

while getopts ":hj:s" opt; do
    case $opt in
    j) PLG_JOBS=$OPTARG ;;
    s) SINGLE_LINE=true ;;
    *) usage ;;
    esac
done

shift $((OPTIND - 1))

mkdir -p $PLG_PREFIX

case "$1" in
sy*)
    hide_cursor
    plg_unpatch
    plg_sync
    $SINGLE_LINE && echo
    show_cursor
;;
u*)
    hide_cursor
    plg_unpatch
    $SINGLE_LINE && echo
    show_cursor
;;
st*) plg_status ;;
p*) plg_patch ;;
c*) plg_clean ;;
*) usage ;;
esac
