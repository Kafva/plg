#!/usr/bin/env bash
set -e

ESC=$(printf '\033')

die() { printf "$1\n" >&2 && exit 1; }
hdr() {
    if $SINGLE_LINE; then
        # Clear line and overwrite
        printf "\r%*s" "$(tput cols)" "" >&2
        printf "\r$*" >&2
    else
        printf "$*\n" >&2
    fi
}
hide_cursor() { printf '\033[?25l'; }
show_cursor() { printf '\x1b[?25h'; }
usage() {
    cat << EOF >&2
Usage: plg [OPTIONS] <COMMAND>

${ESC}[93mCOMMANDS:${ESC}[0m
  ${ESC}[92msy(nc)${ESC}[0m        Sync and patch all plugins
  ${ESC}[92mst(atus)${ESC}[0m      Show status
  ${ESC}[92mc(lean)${ESC}[0m       Delete stray pacakges
  ${ESC}[92mp(atch)${ESC}[0m       Apply patches onto all plugins
  ${ESC}[92mu(npatch)${ESC}[0m     Unpatch all plugins

${ESC}[93mOPTIONS:${ESC}[0m
    ${ESC}[92m-j${ESC}[0m          Job count for syncing [default: $PLG_JOBS]
    ${ESC}[92m-s${ESC}[0m          Print output on single line

${ESC}[93mENVIRONMENT:${ESC}[0m
  ${ESC}[92mPLG_PLUGINS${ESC}[0m          Path to configuration file, should export PKGS=() and optionally PATCHES=()
  ${ESC}[92mPLG_PREFIX${ESC}[0m           Path to clone repositories into, needs to be on runtimepath
  ${ESC}[92mPLG_PATCHDIR${ESC}[0m         Path to patches

EOF
    exit 1
}

_unpatch() {
    local repo="$PLG_PREFIX/$(basename "$1")"
    if [ ! -d "$repo" ]; then
        return
    fi
    local output=$(git -C $repo checkout . 2>&1)
    # Skip parser*/ directories for nvim-treesitter
    git -C $repo clean \
        --exclude=parser \
        --exclude=parser-info \
        --exclude=.tags \
        --exclude=.luarc.json \
        -fdx &> /dev/null

    if [ "$output" != "Updated 0 paths from the index" ]; then
        hdr "$1: \033[32m$output\033[0m"
    fi
}

_sync_repo() {
    local remotepath="$1"

    if [[ "$remotepath" == *://* ]]; then
        local url="$remotepath"
    else
        local url="https://github.com/$remotepath"
    fi

    mkdir -p "$PLG_PREFIX"
    local outdir="$PLG_PREFIX/$(basename $remotepath)"

    if [ -d "$outdir" ]; then
        local output=$(if ! git -C $outdir pull 2>&1; then printf "ERROR"; fi)

        if grep -q "ERROR" <<< "$output"; then
            local errmsg=$(grep -v "^ERROR$" <<< "$output")
            hdr "$remotepath: \033[91mPull failed\033[0m\n$errmsg"
        elif [ "$output" = "Already up to date." ]; then
            hdr "$remotepath: \033[32mAlready up to date\033[0m"
        else
            hdr "$remotepath: \033[32m$(grep 'Updating.*' <<< "$output")\033[0m"
        fi
    else
        local output=$(git -c advice.detachedHead=false clone \
            --depth $PLG_CLONE_DEPTH ${@:2} "$url" "$outdir" 2>&1)
        hdr "$remotepath: \033[32m$(grep 'Resolving deltas.*' <<< "$output")\033[0m"
    fi
}

plg_sync() {
    local i=0
    for pkg in ${PKGS[@]}; do
        _sync_repo $pkg &

        # Clone PLG_JOBS repos at a time
        if [ $((i % PLG_JOBS)) = $((PLG_JOBS - 1)) ]; then
            wait
        fi
        i=$((i + 1))
    done

    wait

    plg_patch
}

plg_unpatch() {
    for pkg in ${PKGS[@]}; do
        _unpatch $pkg
    done
}

plg_patch() {
    [ -z "${PATCHES[*]}" ] && return

    for p in ${PATCHES[@]}; do
        if ! git -C $PLG_PREFIX/$p apply "$PLG_PATCHDIR/$(basename "$p").patch"; then
            hdr "$p: \033[91mPatch failed\033[0m"
            exit 1
        fi
    done
}

plg_status() {
    for pkg in ${PKGS[@]}; do
        local repo="$PLG_PREFIX/$(basename "$pkg")"
        if [ -z "$repo" ]; then
            echo "Not found: $pkg" >&2
            continue
        fi

        # * Try tag name
        local refname=$(git -C $repo tag --points-at HEAD 2> /dev/null | head -n1)
        # * Try branch name
        [ -z "$refname" ] &&
            local refname=$(git -C $repo symbolic-ref --short HEAD 2> /dev/null)
        [ -n "$refname" ] && refname="[$refname]"
        printf "$pkg \033[32m$refname\033[0m\n" >&2

        git -c color.status=always -C "$repo" status -s
    done
}

plg_clean() {
    local cleaned=false
    for d in "$PLG_PREFIX"/*; do
        local name=$(basename $d)
        if ! grep -qE "/${name}\s+" <<< "${PKGS[*]} "; then
            echo "Removing stray package: $name"
            rm -rf ${d}
            cleaned=true
        fi
    done
    $cleaned || echo "No stray packages"
}

################################################################################

# Exports PKGS and PATCHES
PLG_PLUGINS=${PLG_PLUGINS:-$HOME/.config/nvim/plugins.sh}
PLG_PATCHDIR="${PLG_PATCHDIR:-$HOME/.config/nvim/patches}"
# Skip support for .../opt/
PLG_PREFIX=${PLG_PREFIX:-"$HOME/.local/share/nvim/site/pack/plg/start"}
PLG_CLONE_DEPTH=${PLG_CLONE_DEPTH:-1}
PLG_JOBS=8
SINGLE_LINE=false

# shellcheck disable=SC1090
source "$PLG_PLUGINS"

trap show_cursor EXIT

while getopts ":hj:s" opt; do
    case $opt in
    j) PLG_JOBS=$OPTARG ;;
    s) SINGLE_LINE=true ;;
    *) usage ;;
    esac
done

shift $((OPTIND - 1))

case "$1" in
sy*)
    hide_cursor
    plg_unpatch
    plg_sync
    $SINGLE_LINE && echo
;;
u*)
    hide_cursor
    plg_unpatch
    $SINGLE_LINE && echo
;;
st*) plg_status ;;
p*) plg_patch ;;
c*) plg_clean ;;
*) usage ;;
esac
